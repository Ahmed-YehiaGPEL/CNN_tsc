{
  "name": "Cnn tsc",
  "tagline": "A CNN for time-series classification",
  "body": "### A Convolutional Neural Network for time-series classification\r\nThis post implements a CNN for time-series classification and benchmarks the performance on three of the [UCR](http://www.cs.ucr.edu/~eamonn/time_series_data/) time-series.\r\n\r\nCNN's are widely used for applications involving images. In this post, I show their performance on time-series. This project is a rebound after [this](http://robromijnders.github.io/LSTM_tsc/) implementation of  LSTM's on the same data. The LSTM's only got 60% test-accuracy, whereas state-of-the-art is 99.8% test-accuracy. \r\n\r\n## Mechanism\r\nMany of our knowledge and intuition for CNN's on images carry over to time-series. The main difference in the code is the *stride* argument we pass to the conv-layer. We want the kernel to stride along the time-series, but not along the second dimension that we would have used for images. \r\n\r\n## Batchnorm\r\nThis projects is also a showcase of batch normalization after the conv-layers. With help of [this](http://stackoverflow.com/questions/33949786/how-could-i-use-batch-normalization-in-tensorflow) post on StackOverflow, the code is equipped with three batch-norm layers.\r\n\r\n### Performance\r\nWe benchmark the implementation on the datasets from UCR. Specifically, we achieve 99.9% and 84.9% test-accuracy on *Two_Patterns* and *ChlorineConcentration*. Both performances have remarkable consequences.\r\n  * The CNN achieves 99.9% test-accuracy on *Two_Patterns*, beating our own implementation of an LSTM on the same dataset, which got only 60%. Over the next months, I'll work on another three time-series projects. I hope to get back to this result and explain why the LSTM unperforms and the CNN overperforms on this dataset. *Side note, [this](http://arxiv.org/abs/1603.06995) article got only 99.8% test-accuracy*\r\n  * The CNN achieves 84.9% test-accuracy on *ChlorineConcentration*. This results improves on [this](http://arxiv.org/abs/1603.06995) article, where the best performance was 79.7% and the second best at 74%. An improvement of 5.2% seems significant and I am interested to discuss this result with the researchers. By no means am I trying to attach anyone, I am eager to learn from other people's reasonings and design decisions.\r\n\r\n### Results\r\nThe graph of the CNN:\r\n![Graph](https://github.com/RobRomijnders/CNN_tsc/blob/master/pic/graph.png?raw=true)\r\nThe evolution of accuracies based on a run with ChlorineConcentration\r\n![Accuracies](https://github.com/RobRomijnders/CNN_tsc/blob/master/pic/train_val_acc_ChlorineConcentration.png?raw=true)\r\nShowcase of TensorBoard\r\n![TensorBoard](https://github.com/RobRomijnders/CNN_tsc/blob/master/pic/tensorboard_hist.png?raw=true)\r\n\r\nAs always, I am curious to any comments and questions. Reach me at romijndersrob@gmail.com",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}